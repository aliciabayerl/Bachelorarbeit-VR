import pandas as pd
import os
from scipy.stats import shapiro, levene
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
folder_path = 'POMS'
input_file = 'participant_scores.csv'
file_path = os.path.join(folder_path, input_file)
data = pd.read_csv(file_path)

# Calculate change scores for each mood state in POMS data
data['Change_Tension'] = data['After Tension'] - data['Before Tension']
data['Change_Vigor'] = data['After Vigor'] - data['Before Vigor']
data['Change_Confusion'] = data['After Confusion'] - data['Before Confusion']
data['Change_Fatigue'] = data['After Fatigue'] - data['Before Fatigue']
data['Change_Anger'] = data['After Anger_x'] - data['Before Anger_x']
data['Change_Depression'] = data['After Depression'] - data['Before Depression']

change_scores = ['Change_Tension', 'Change_Vigor', 'Change_Confusion', 'Change_Fatigue', 'Change_Anger', 'Change_Depression']

# Normality tests
print("Normality Tests:")
for score in change_scores:
    stat, p_value = shapiro(data[score])
    print(f'{score}: Statistics={stat}, p-value={p_value}')
    if p_value > 0.05:
        print(f'{score} is normally distributed')
    else:
        print(f'{score} is not normally distributed')
    print()

# Homogeneity of variance tests
print("Homogeneity of Variance Tests:")
for score in change_scores:
    stat, p_value = levene(data[data['Condition'] == 0][score],
                           data[data['Condition'] == 1][score],
                           data[data['Condition'] == 2][score])
    print(f'{score}: Statistics={stat}, p-value={p_value}')
    if p_value > 0.05:
        print(f'Variances for {score} are equal across groups')
    else:
        print(f'Variances for {score} are not equal across groups')
    print()

# Plot settings for better readability on A4
plt.rcParams.update({'font.size': 14, 'axes.titlesize': 14, 'axes.labelsize': 12, 'xtick.labelsize': 12, 'ytick.labelsize': 12, 'legend.fontsize': 12})

# Distribution plots
plt.figure(figsize=(8, 6.5))
for i, score in enumerate(change_scores, 1):
    plt.subplot(2, 3, i)
    mood = score.split('_')[1]  
    sns.histplot(data[score].values, kde=True, binwidth=3)  # Explicitly convert to numpy array
    plt.title(f'{mood}')  
    plt.xlabel('Change Score')
    plt.ylabel('Frequency')

plt.tight_layout()
image_path = 'POMS/Plot_images'
output_image = os.path.join(image_path, 'POMS_distribution.png')
plt.savefig(output_image, dpi=300)  # High resolution for A4 print
plt.show()

# Boxplots with different colors
plt.figure(figsize=(8, 6.5))
palette = ["#abd9e9", "#74add1", "#4575b4"]
for i, score in enumerate(change_scores, 1):
    plt.subplot(2, 3, i)
    sns.boxplot(x='Condition', y=score, data=data, palette=palette)
    mood = score.split('_')[1]
    plt.title(f'{mood}')
    plt.xlabel('Condition')
    plt.ylabel('Change Score')

plt.tight_layout()
output_image_boxplot = os.path.join(image_path, 'POMS_Boxplot.png')
plt.savefig(output_image_boxplot, dpi=300)  # High resolution for A4 print
plt.show()

# Bar plots
plt.figure(figsize=(8, 6.5))

# Calculate mean and standard error for each mood state by condition
mean_se_data = data.groupby('Condition')[change_scores].agg(['mean', 'sem']).reset_index()

# Plot each mood state in a separate subplot
for i, score in enumerate(change_scores, 1):
    plt.subplot(2, 3, i)
    mood = score.split('_')[1]
    means = mean_se_data[(score, 'mean')]
    sems = mean_se_data[(score, 'sem')]
    plt.bar(mean_se_data['Condition'], means, yerr=sems, color=palette)
    plt.title(f'{mood}')
    plt.xlabel('Condition')
    plt.ylabel('Change Score')

plt.tight_layout()
output_image_barplot = os.path.join(image_path, 'POMS_Barplot.png')
plt.savefig(output_image_barplot, dpi=300)  # High resolution for A4 print
plt.show()
