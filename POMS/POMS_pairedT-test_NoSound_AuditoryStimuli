import pandas as pd
from scipy.stats import ttest_rel
import os
import matplotlib.pyplot as plt
import seaborn as sns

# Define file paths
folder_path = 'POMS'
input_file = 'questionnaire_with_scores.csv'
file_path = os.path.join(folder_path, input_file)

# Load the data
data = pd.read_csv(file_path)

# Verify column names to ensure the required column is present
print(data.columns)

# Define the column name for motion sickness
motion_sickness_col = 'Did you experience any discomfort or adverse effects (physical or emotional, like nausea/dizziness due to motion sickness) during or after the virtual reality experience?'

# Ensure the Condition mapping is correct
data['Combined_Condition'] = data['Condition_x'].replace({
    0: 'No Sound',
    1: 'Auditory Stimuli',
    2: 'Auditory Stimuli'
})

# Separate data into motion sickness and no motion sickness groups
motion_sickness = data[data[motion_sickness_col] == 'Yes'].copy()
no_motion_sickness = data[data[motion_sickness_col] == 'No'].copy()

# Print the number of participants in each group
print(f"Number of participants with motion sickness: {motion_sickness.shape[0]}")
print(f"Number of participants with no motion sickness: {no_motion_sickness.shape[0]}")
print(f"Total number of participants: {data.shape[0]}")

# Further separate each group by combined condition
groups = {
    'Motion Sickness - No Sound': motion_sickness[motion_sickness['Combined_Condition'] == 'No Sound'].copy(),
    'Motion Sickness - Auditory Stimuli': motion_sickness[motion_sickness['Combined_Condition'] == 'Auditory Stimuli'].copy(),
    'No Motion Sickness - No Sound': no_motion_sickness[no_motion_sickness['Combined_Condition'] == 'No Sound'].copy(),
    'No Motion Sickness - Auditory Stimuli': no_motion_sickness[no_motion_sickness['Combined_Condition'] == 'Auditory Stimuli'].copy()
}

# Calculate the change scores for each mood state in both groups
mood_states = ['Tension', 'Depression', 'Anger_x', 'Vigor', 'Fatigue', 'Confusion']

for mood_state in mood_states:
    for group in groups:
        groups[group][f'Change_{mood_state}'] = groups[group][f'After {mood_state}'] - groups[group][f'Before {mood_state}']

# Function to analyze and plot the data
def analyze_and_plot_combined(groups, group_name):
    results = []  # Initialize a list to store results for plotting

    for mood in mood_states:
        print(f"Statistical Analysis for {mood} ({group_name}):")
        for condition, group_data in groups.items():
            condition_diff = group_data[f'Change_{mood}']  # Use Change_ instead of Difference_

            # Paired t-test
            t_stat, p_val = ttest_rel(condition_diff, [0] * len(condition_diff))

            # Calculate mean and standard deviation
            mean_diff = condition_diff.mean()
            std_diff = condition_diff.std()

            # Store results for plotting
            results.append({
                'Mood': mood,
                'Condition': condition,
                'Mean Difference': mean_diff,
                'Standard Deviation': std_diff,
                'p-value': p_val,
                'Group': group_name
            })

            print(f"Condition {condition}: Mean Difference = {mean_diff:.2f}, Standard Deviation = {std_diff:.2f}, p-value = {p_val:.4f}, Participants = {condition_diff.shape[0]}")
        print()

    # Convert results to DataFrame for plotting
    results_df = pd.DataFrame(results)

    # Set up the plot
    sns.set(style="whitegrid")
    fig, ax = plt.subplots(figsize=(15, 8))

    # Create bar plot
    sns.barplot(
        x='Mood', 
        y='Mean Difference', 
        hue='Condition', 
        data=results_df, 
        ci=None, 
        palette='muted', 
        capsize=.1
    )

    # Add error bars manually
    for i in range(len(results_df)):
        row = results_df.iloc[i]
        ax.errorbar(
            x=i % len(mood_states), 
            y=row['Mean Difference'], 
            yerr=row['Standard Deviation'], 
            fmt='none', 
            c='black', 
            capsize=5
        )

    # Customize the plot
    plt.title(f'Mean Change in Mood States by Condition ({group_name})', fontsize=16)
    plt.xlabel('Mood State', fontsize=14)
    plt.ylabel('Mean Change', fontsize=14)
    plt.legend(title='Condition', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.xticks(rotation=45)

    # Save and show the plot
    output_image = os.path.join(folder_path, 'Plot_Images', f'POMS_statistical_analysis_conditions_{group_name}.png')
    plt.tight_layout()
    plt.savefig(output_image)
    plt.show()

# Analyze and plot for combined conditions
analyze_and_plot_combined(groups, "Combined Conditions")
